"" FRONT MATTER
" vim: textwidth=78 filetype=vim

" This should be at the top of the file. We don't do vi compatibility, and it
" messes with some vundle plugins.
set nocompatible

" Setting debug_enable=1 allows adding diagnostic messages in the vimrc stuff,
" e.g.:
"   call  DebugMsg("option wrap is " . &wrap)
" It's handy for solving problems in vim configuration sometimes.
let g:debug_enable=0

function! DebugMsg(msg)
    if exists("g:debug_enable")
        if g:debug_enable
            echom( "DebugMsg: [" . a:msg . "]")
        endif
    endif
endfunction

call DebugMsg("Loading " . expand("<sfile>"))

" Set VIMHOME to the directory of this file.
" Note: this presumes that this file is ~/.vim/vimrc, NOT ~/.vimrc! If it's
" ~/.vimrc then VIMHOME will just be ~
let $VIMHOME=expand('<sfile>:p:h')

"" GENERAL SETTINGS

" backspace over autoindent, line breaks, start of insert
set backspace=indent,eol,start

" make it see tab characters as 8 spaces
set tabstop=8
" make the default indent level 4 spaces
set shiftwidth=4
" make softtabstop always take the value of shiftwidth by setting it negative
set softtabstop=-1
" make indenting commands snap to multiples of <shiftwidth> spaces
set shiftround
" make pressing the tab key insert <shiftwidth> spaces instead of a literal tab
set expandtab
" make backspacing go back to a multiple of <shiftwidth> spaces instead of 1
set smarttab
" auto-indent new lines to same indentation as old lines
set autoindent
" copy indent structure of an old line when writing a new one
set copyindent

" By default, wrap lines at 80 characters; file types may override this
set textwidth=80

" Don't write the current file when jumping to another (it writes when ZQ is
" typed)
set noautowrite
" disable normal backups (created by writing to an existing file)
set nobackup
" enable swap file
set swapfile
" Wait 5 seconds before writing swap file
set updatetime=5000
" make backups before overwriting a file
set writebackup
" Save backups and swap files in the ~/.vimtmp directory
set backupdir=~/.vimtmp
set directory=~/.vimtmp,.
" Save undo history persistently in the same directory
set undofile
set undodir=~/.vimtmp/

" Search incrementally; ie find next match as the search input is changed
set incsearch
" Ignore case when searching
set ignorecase
" but override that when the search pattern contains uppercase chars
set smartcase

" Automatically reload files when they are changed by something besides Vim
" (e.g. Git)
set autoread

" Enable wildmenu (vim command line completion for files and commands)
set wildmenu
" In wildmenu, ignore certain file types that never get edited
set wildignore=*.o,*~,*.pyc,*.git/*

" formatoptions help: ":help fo-table" or ":help fo"
" Don't autowrap text
set formatoptions-=t
" Don't autowrap comments
set formatoptions-=c
" Do insert comment leader when hitting Enter in insert mode
set formatoptions+=r
" Do insert comment leader when hitting o or O on a comment line in normal mode
set formatoptions+=o
" Do allow formatoptionsrmatting comments with 'gq'
set formatoptions+=q

" Function for deleting trailing white space
" Control this by a variable, so that certain filetypes can override it
" and ignore this behavior.
func! DeleteTrailingWS()
    if !exists("b:no_delete_trailing_ws") || !b:no_delete_trailing_ws
        exe "normal mz"
        %s/\s\+$//ge
        exe "normal `z"
    endif
endfunc
" Delete trailing white space when saving a buffer
autocmd BufWrite * :call DeleteTrailingWS()

" Remember the 200 last commands
set history=200

" Remember 1000 undo stages of history
set undolevels=1000

" Folding settings - Experimental
" Fold based on syntax
set foldmethod=syntax
" Limit the deepest possible fold to 3 levels
set foldnestmax=3
" Don't fold by default
set nofoldenable
" Close folds beyond level 1
set foldlevel=1

""" BINDINGS

" bind F2 to toggle paste mode
set pastetoggle=<F2>
" most of the time paste mode is desired for inserting, so make it
" automatically enter insert mode if pressed in normal mode
nnoremap <F2> i<F2>

" bind F3 to make install, then open the quickfix window to point at errors.
" (at present, the most common use case includes 'make' as part of make
" install)
set makeprg=make
nmap <F3> :wall<CR>:make! install<CR><CR>:cwindow<CR>

" bind Ctrl-N to :nohlsearch (turn off search match highlight) command
map <C-n> :nohlsearch<CR>

" make multiple levels of indenting easier by keeping the same text selected
" after doing a < or >
vnoremap > >gv
vnoremap < <gv

" autocomplete parens when typed
" inoremap ( ()<Esc>i

" prevent going into Ex mode by accident
nnoremap Q <Nop>

" bind Ctrl-H, Ctrl-J, Ctrl-K, Ctrl-L to move between windows rather than
" Ctrl-W + [hjkl]
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" a bunch of mappings will be set with comma as an initial step
" set up comma as the map leader
let mapleader = ","

" bind tab commands to ,g ,h ,t
map <Leader>g <esc>:tabprevious<CR>
map <Leader>h <esc>:tabnext<CR>
map <Leader>t <esc>:tabnew<CR>

" bind save to ,s
map <Leader>s <esc>:update<CR>
" also bind Ctrl-s to save, for muscle memory
map <C-s> <esc>:update<CR>

" other muscle memory remappings
" bind Ctrl-Z to undo
nnoremap <C-z> u
inoremap <C-z> <ESC>u
vnoremap <C-z> u
" could bind Ctrl-Y to redo here, but really what's the point, Ctrl-R already
" does this and is close enough
" bind Ctrl-A to select-all
nnoremap <C-A> ggVG

" bind :quit to ,q
noremap <Leader>q :quit<CR>
" and bind :quitall to ,Q
noremap <Leader>Q :quitall<CR>

" bind ,f and ,b to cnext and cprev for going through errors
" another suggestion is to remap these to F4 and <Leader>F4
nnoremap <Leader>f :cnext<CR>
nnoremap <Leader>b :cprev<CR>

" use F10 to present a buffer menu and prompt the user for which one to go to
nnoremap <F10> :buffers<CR>:buffer<Space>

" bind ,w and ,W to copy the current word/WORD to the w register:
nnoremap <leader>w :let @w=expand("<cword>")<CR>
nnoremap <leader>W :let @w=expand("<cWORD>")<CR>

" bind ,r to replace the current word with contents of the w register
nnoremap <leader>r viw"wp

" bind ,e to switch to the previous ("alternate") file, for toggling back and
" forth between two files repeatedly
nnoremap <leader>e <C-^>

" bind ,x to switch between .h and .cpp files if they're in the same dir
" (only relevant for heavy c/c++ use. should this go in ftplugin?)
"nnoremap <leader>x  :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>

" bind ,p to reformat the current paragraph
" Experimental. It may be preferable to put this on a key on the left side.
nnoremap <leader>p gqip

" Bind ,u and ,U to make the current word lowercase or uppercase respectively
nnoremap <leader>u viwue
nnoremap <leader>U viwUe

" Bind a rapid 'jk' to leave insert mode, without reaching up to hit ESC.
" Disabled; the only reason this should be needed is if doing a lot of editing
" on a device where capslock can't be remapped to ESC.
"inoremap jk <ESC>
"inoremap JK <ESC>
"inoremap jj <Nop>

" In normal and visual mode, when wrap is ON, the per-line (instead of
" per-display) vertical movement is disorienting.
" Remapping j and k to gj and gk fixes this, while not affecting anything when
" wrap is off
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" bind \ to search command history; it's important enough for a single key
nmap \ q/
" bind backspace to command history - slightly less important
nmap <bs> q:

""" DISPLAY SETTINGS

" highlight syntax
syntax on

" Assume we have 256 colors.
" This'll only work right if the terminal supports 256 colors. But that's
" reasonable; this isn't the 80s.
set t_Co=256

" Always show statusline
set laststatus=2

" don't set in-editor newlines (lines can go off the right of the screen)
set nowrap
" but if we are in some filetype or mode where we do wrap, do it nicely
set linebreak
" indent wrapped lines to the same amount
set breakindent

" Highlight search results
set hlsearch

" don't redraw when executing a macro
set lazyredraw

" 'set list' enables the display of whitespace, and 'set listchars' refines
" the behavior of that. 'list' is off by default...
set nolist
" but we define characters to replace whitespace with if it's turned on
" anyway.
set listchars=tab:>.,trail:.,extends:#,nbsp:.

" When entering a closing parenthesis or bracket, briefly hop to the opening
" one
set showmatch

" Number lines in the margin
set number

" Show the file and path in the terminal title if possible (subject to change
" if it gets too busy)
set title

" Never flash or ring bells
set noerrorbells visualbell t_vb=

" use custom color scheme for vimdiff
if &diff
  colorscheme vimdiff
endif

""" X WINDOWS SPECIFIC SETTINGS

" Copy and paste into/out of the X clipboard
set clipboard=unnamedplus

" GVim - no blank white area at bottom
set guiheadroom=0

""" FILETYPE SPECIFIC SETTINGS
" Handlebars HTML template files: Set .hbs files to html mode
autocmd BufReadPost *.hbs set filetype=html
" Template Toolkit output: is HTML plus extensions, also set to html
autocmd BufNewFile,BufReadPost *.tt set filetype=html
" ChucK music programming language: Set .ck files to chuck mode
autocmd BufReadPost *.ck set filetype=ck
" Comma separated or tab separated values: Set .csv files to CSV mode
" does having both BufNewFile, BufReadPost work?
autocmd BufNewFile,BufReadPost *.csv set filetype=csv
" To avoid having to make a copy of csv.vim as tsv.vim and just add a few commands to it,
" stick them here instead.
autocmd BufNewFile,BufReadPost *.tsv set filetype=csv | set shiftwidth=0 | set noexpandtab
" For some reason this requires its own line.
autocmd BufNewFile,BufReadPost *.tsv Delimiter \t
" Different indent levels
" Uncomment if there is a problem with any of these file types
" autocmd FileType javascript set shiftwidth=2
" autocmd FileType html set shiftwidth=2
" autocmd filetype c set shiftwidth=2
" autocmd filetype cpp set shiftwidth=2
autocmd FileType css set shiftwidth=4
" autocmd FileType cucumber set shiftwidth=2
" autocmd FileType ruby set shiftwidth=2


""" POWERLINE

" set runtime path to include powerline
"set rtp+=$HOME/.local/lib/python2.7/site-packages/powerline/bindings/vim/

""" VUNDLE
" NOTE: If you just downloaded this vimrc, plugins will not be installed.
" Run :PluginInstall or see documentation at github.com/VundleVim/Vundle.vim

" required settings for vundle
filetype off

" set runtime path to include vundle
set runtimepath+=$HOME/.vim/bundle/Vundle.vim

" start vundle
call vundle#begin()

" Keep plugins in a separate file
source $VIMHOME/vundle-list.vim

" stop vundle
call vundle#end()

" bind tcomment behavior to period
vnoremap . :TComment<CR>

""" MORE GENERAL SETTINGS THAT HAVE TO GO AFTER VUNDLE

" enable filetype detection
filetype on
" load plugins for file types
filetype plugin on
" indent based on file type
filetype indent on

" Helpful notes
" Format XML and CSV: :%!xmllint --format -  :%!column -s, -t
" look into setting colorcolumn on different filetypes
